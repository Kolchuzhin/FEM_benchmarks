function [N,dN]=ShapeFunctions(r,s,t,key)
%=========================================================================%
% PURPOSE:
%            shape functions for finite elements
%
% INPUT:
% 		0 <= r,s,t <= 1
%
%            key:
% 				1 == 2D  4-node quadrilateral element / linear functions
%				2 == 3D  8-node brick element without extra shape functions
%			   21 == 3D  8-node brick element with extra shape functions (ESF)
%				3 == 3D 20-node brick element / quadratic functions
%
% OUTPUT:
%           [ N] shape functions
%			[dN] derivative of shape functions 
%
% REFERENCE:
%            CALFEM, 
%			 ANSYS, Inc. Theory Reference
%-------------------------------------------------------------------------%
% written by Kolchuzhin V.A., LMGT, TU Chemnitz
%=========================================================================%
% key=2;
% ET,1,SOLID45,1    
% KEYOPT(1): Include (0) or suppress (1) extra displacement shapes

% ANSYS: s t r
%=========================================================================%
switch key
%=========================================================================%
    case 1 % 2D 4-node quadrilateral element / linear functions
%--------- shape functions ---------
N(:,1)=(1-r).*(1-s);  
N(:,2)=(1+r).*(1-s);  
N(:,3)=(1+r).*(1+s);  
N(:,4)=(1-r).*(1+s);  
N=N/4;
%-- derivative of shape functions --
dN(1,1,:)=-(1-s); dN(2,1,:)=-(1-r);
dN(1,2,:)= (1-s); dN(2,2,:)=-(1+r);
dN(1,3,:)= (1+s); dN(2,3,:)= (1+r);
dN(1,4,:)=-(1+s); dN(2,4,:)= (1-r);
dN=dN/4.;
%=========================================================================%
    case 2 % 3D 8-nodes brick element without extra shape functions
%--------- shape functions ---------
N(:,1)=(1-r).*(1-s).*(1-t);  
N(:,2)=(1+r).*(1-s).*(1-t);  
N(:,3)=(1+r).*(1+s).*(1-t);  
N(:,4)=(1-r).*(1+s).*(1-t);  
N(:,5)=(1-r).*(1-s).*(1+t);
N(:,6)=(1+r).*(1-s).*(1+t);
N(:,7)=(1+r).*(1+s).*(1+t);
N(:,8)=(1-r).*(1+s).*(1+t);
N=N/8;
%--------- derivative of shape functions ---------
dN(1,1,:)=-(1-s).*(1-t); dN(2,1,:)=-(1-r).*(1-t); dN(3,1,:)=-(1-r).*(1-s); 
dN(1,2,:)= (1-s).*(1-t); dN(2,2,:)=-(1+r).*(1-t); dN(3,2,:)=-(1+r).*(1-s);
dN(1,3,:)= (1+s).*(1-t); dN(2,3,:)= (1+r).*(1-t); dN(3,3,:)=-(1+r).*(1+s);
dN(1,4,:)=-(1+s).*(1-t); dN(2,4,:)= (1-r).*(1-t); dN(3,4,:)=-(1-r).*(1+s);
dN(1,5,:)=-(1-s).*(1+t); dN(2,5,:)=-(1-r).*(1+t); dN(3,5,:)= (1-r).*(1-s);
dN(1,6,:)= (1-s).*(1+t); dN(2,6,:)=-(1+r).*(1+t); dN(3,6,:)= (1+r).*(1-s);
dN(1,7,:)= (1+s).*(1+t); dN(2,7,:)= (1+r).*(1+t); dN(3,7,:)= (1+r).*(1+s); 
dN(1,8,:)=-(1+s).*(1+t); dN(2,8,:)= (1-r).*(1+t); dN(3,8,:)= (1-r).*(1+s);
dN=dN/8.;
%=========================================================================%
    case 21 % 3D 8-nodes brick element with extra shape functions (ESF)
%--------- shape functions ---------
N(:,1)=(1-r).*(1-s).*(1-t);  
N(:,2)=(1+r).*(1-s).*(1-t);  
N(:,3)=(1+r).*(1+s).*(1-t);  
N(:,4)=(1-r).*(1+s).*(1-t);  
N(:,5)=(1-r).*(1-s).*(1+t);
N(:,6)=(1+r).*(1-s).*(1+t);
N(:,7)=(1+r).*(1+s).*(1+t);
N(:,8)=(1-r).*(1+s).*(1+t);
% nodeless variables
% +u1*(1-s^2)+u2*(1-t^2)+u3*(1-r^2)
N(:, 9)=(1-r^2)*8;
N(:,10)=(1-s^2)*8;
N(:,11)=(1-t^2)*8;

N=N/8;
%--------- derivative of shape functions ---------
dN(1,1,:)=-(1-s).*(1-t); dN(2,1,:)=-(1-r).*(1-t); dN(3,1,:)=-(1-r).*(1-s); 
dN(1,2,:)= (1-s).*(1-t); dN(2,2,:)=-(1+r).*(1-t); dN(3,2,:)=-(1+r).*(1-s);
dN(1,3,:)= (1+s).*(1-t); dN(2,3,:)= (1+r).*(1-t); dN(3,3,:)=-(1+r).*(1+s);
dN(1,4,:)=-(1+s).*(1-t); dN(2,4,:)= (1-r).*(1-t); dN(3,4,:)=-(1-r).*(1+s);
dN(1,5,:)=-(1-s).*(1+t); dN(2,5,:)=-(1-r).*(1+t); dN(3,5,:)= (1-r).*(1-s);
dN(1,6,:)= (1-s).*(1+t); dN(2,6,:)=-(1+r).*(1+t); dN(3,6,:)= (1+r).*(1-s);
dN(1,7,:)= (1+s).*(1+t); dN(2,7,:)= (1+r).*(1+t); dN(3,7,:)= (1+r).*(1+s);
dN(1,8,:)=-(1+s).*(1+t); dN(2,8,:)= (1-r).*(1+t); dN(3,8,:)= (1-r).*(1+s);

dN(1, 9,:)=-(1+s).*(1+t); dN(2, 9,:)= (1-r).*(1+t); dN(3, 9,:)= (1-r).*(1+s);
dN(1,10,:)=-(1+s).*(1+t); dN(2,10,:)= (1-r).*(1+t); dN(3,10,:)= (1-r).*(1+s);
dN(1,11,:)=-(1+s).*(1+t); dN(2,11,:)= (1-r).*(1+t); dN(3,11,:)= (1-r).*(1+s);
dN=dN/8.;
%=========================================================================%
    case 3 % 3D 20-node brick element / quadratic functions
%----------- shape functions ------------
N(:, 9)=(1-r^2).*(1-s  ).*(1-t)/4;  
N(:,10)=(1+r  ).*(1-s^2).*(1-t)/4;  
N(:,11)=(1-r^2).*(1+s  ).*(1-t)/4;  
N(:,12)=(1-r  ).*(1-s^2).*(1-t)/4;  
N(:,13)=(1-r^2).*(1-s  ).*(1+t)/4;
N(:,14)=(1+r  ).*(1-s^2).*(1+t)/4;
N(:,15)=(1-r^2).*(1+s  ).*(1+t)/4;
N(:,16)=(1-r  ).*(1-s^2).*(1+t)/4;
N(:,17)=(1-r  ).*(1-s  ).*(1-t^2)/4;
N(:,18)=(1+r  ).*(1-s  ).*(1-t^2)/4;
N(:,19)=(1+r  ).*(1+s  ).*(1-t^2)/4;
N(:,20)=(1-r  ).*(1+s  ).*(1-t^2)/4;
N(:,1)=(1-r).*(1-s).*(1-t)/8-(N(:,17)+N(:,12)+N(:, 9))/2;  
N(:,2)=(1+r).*(1-s).*(1-t)/8-(N(:,18)+N(:,10)+N(:, 9))/2;  
N(:,3)=(1+r).*(1+s).*(1-t)/8-(N(:,19)+N(:,11)+N(:,10))/2;  
N(:,4)=(1-r).*(1+s).*(1-t)/8-(N(:,20)+N(:,12)+N(:,11))/2;  
N(:,5)=(1-r).*(1-s).*(1+t)/8-(N(:,17)+N(:,16)+N(:,13))/2;
N(:,6)=(1+r).*(1-s).*(1+t)/8-(N(:,18)+N(:,14)+N(:,13))/2;
N(:,7)=(1+r).*(1+s).*(1+t)/8-(N(:,19)+N(:,15)+N(:,14))/2;
N(:,8)=(1-r).*(1+s).*(1+t)/8-(N(:,20)+N(:,16)+N(:,15))/2;
%--------- derivative of shape functions ---------
dN(1,1,:)=1/8-1/8.*s.*t-1/8.*t.^2+1/8.*s.*t.^2-1/8.*s.^2+1/8.*s.^2.*t+1/4.*r-1/4.*r.*t-1/4.*r.*s+1/4.*r.*s.*t;
dN(1,2,:)=-1/8+1/8.*s.*t+1/8.*t.^2-1/8.*s.*t.^2+1/8.*s.^2-1/8.*s.^2.*t+1/4.*r-1/4.*r.*t-1/4.*r.*s+1/4.*r.*s.*t;
dN(1,3,:)=-1/8-1/8.*s.*t+1/8.*t.^2+1/8.*s.*t.^2+1/4.*r-1/4.*r.*t+1/4.*r.*s-1/4.*r.*s.*t+1/8.*s.^2-1/8.*s.^2.*t;
dN(1,4,:)=1/8+1/8.*s.*t-1/8.*t.^2-1/8.*s.*t.^2-1/8.*s.^2+1/8.*s.^2.*t+1/4.*r-1/4.*r.*t+1/4.*r.*s-1/4.*r.*s.*t;
dN(1,5,:)=1/8+1/8.*s.*t-1/8.*t.^2+1/8.*s.*t.^2-1/8.*s.^2-1/8.*s.^2.*t+1/4.*r+1/4.*r.*t-1/4.*r.*s-1/4.*r.*s.*t;
dN(1,6,:)=-1/8-1/8.*s.*t+1/8.*t.^2-1/8.*s.*t.^2+1/8.*s.^2+1/8.*s.^2.*t+1/4.*r+1/4.*r.*t-1/4.*r.*s-1/4.*r.*s.*t;
dN(1,7,:)=-1/8+1/8.*s.*t+1/8.*t.^2+1/8.*s.*t.^2+1/4.*r+1/4.*r.*t+1/4.*r.*s+1/4.*r.*s.*t+1/8.*s.^2+1/8.*s.^2.*t;
dN(1,8,:)=1/8-1/8.*s.*t-1/8.*t.^2-1/8.*s.*t.^2-1/8.*s.^2-1/8.*s.^2.*t+1/4.*r+1/4.*r.*t+1/4.*r.*s+1/4.*r.*s.*t;
dN(1,9,:)=-1/2.*r.*(-1+s).*(-1+t);
dN(1,10,:)= 1/4.*(-1+s.^2).*(-1+t);
dN(1,11,:)= 1/2.*r.*(1+s).*(-1+t);
dN(1,12,:)=-1/4.*(-1+s.^2).*(-1+t);
dN(1,13,:)= 1/2.*r.*(-1+s).*(1+t);
dN(1,14,:)=-1/4.*(-1+s.^2).*(1+t);
dN(1,15,:)=-1/2.*r.*(1+s).*(1+t);
dN(1,16,:)= 1/4.*(-1+s.^2).*(1+t);
dN(1,17,:)=-1/4.*(-1+s).*(-1+t.^2);
dN(1,18,:)= 1/4.*(-1+s).*(-1+t.^2);
dN(1,19,:)=-1/4.*(1+s).*(-1+t.^2);
dN(1,20,:)= 1/4.*(1+s).*(-1+t.^2);
dN(2,1,:)=1/8-1/8.*r.*t-1/8.*t.^2+1/8.*r.*t.^2+1/4.*s-1/4.*s.*t-1/4.*r.*s+1/4.*r.*s.*t-1/8.*r.^2+1/8.*r.^2.*t;
dN(2,2,:)=1/8+1/8.*r.*t-1/8.*t.^2-1/8.*r.*t.^2+1/4.*s-1/4.*s.*t+1/4.*r.*s-1/4.*r.*s.*t-1/8.*r.^2+1/8.*r.^2.*t;
dN(2,3,:)=-1/8-1/8.*r.*t+1/8.*t.^2+1/8.*r.*t.^2+1/8.*r.^2-1/8.*r.^2.*t+1/4.*s-1/4.*s.*t+1/4.*r.*s-1/4.*r.*s.*t;
dN(2,4,:)=-1/8+1/8.*r.*t+1/8.*t.^2-1/8.*r.*t.^2+1/4.*s-1/4.*s.*t-1/4.*r.*s+1/4.*r.*s.*t+1/8.*r.^2-1/8.*r.^2.*t;
dN(2,5,:)=1/8+1/8.*r.*t-1/8.*t.^2+1/8.*r.*t.^2+1/4.*s+1/4.*s.*t-1/4.*r.*s-1/4.*r.*s.*t-1/8.*r.^2-1/8.*r.^2.*t;
dN(2,6,:)=1/8-1/8.*r.*t-1/8.*t.^2-1/8.*r.*t.^2+1/4.*s+1/4.*s.*t+1/4.*r.*s+1/4.*r.*s.*t-1/8.*r.^2-1/8.*r.^2.*t;
dN(2,7,:)=-1/8+1/8.*r.*t+1/8.*t.^2+1/8.*r.*t.^2+1/8.*r.^2+1/8.*r.^2.*t+1/4.*s+1/4.*s.*t+1/4.*r.*s+1/4.*r.*s.*t;
dN(2,8,:)=-1/8-1/8.*r.*t+1/8.*t.^2-1/8.*r.*t.^2+1/4.*s+1/4.*s.*t-1/4.*r.*s-1/4.*r.*s.*t+1/8.*r.^2+1/8.*r.^2.*t;
dN(2,9,:) =-1/4.*(-1+r.^2).*(-1+t);
dN(2,10,:)= 1/2.*( 1+r).*s.*(-1+t);
dN(2,11,:)= 1/4.*(-1+r.^2).*(-1+t);
dN(2,12,:)=-1/2.*(-1+r).*s.*(-1+t);
dN(2,13,:)= 1/4.*(-1+r.^2).*(1+t);
dN(2,14,:)=-1/2.*( 1+r).*s.*(1+t);
dN(2,15,:)=-1/4.*(-1+r.^2).*(1+t);
dN(2,16,:)= 1/2.*(-1+r).*s.*(1+t);
dN(2,17,:)=-1/4.*(-1+r).*(-1+t.^2);
dN(2,18,:)= 1/4.*( 1+r).*(-1+t.^2);
dN(2,19,:)=-1/4.*( 1+r).*(-1+t.^2);
dN(2,20,:)= 1/4.*(-1+r).*(-1+t.^2);
dN(3,1,:)=1/8-1/8.*r.*s+1/4.*t-1/4.*s.*t-1/4.*r.*t+1/4.*r.*s.*t-1/8.*s.^2+1/8.*r.*s.^2-1/8.*r.^2+1/8.*r.^2.*s;
dN(3,2,:)=1/8+1/8.*r.*s+1/4.*t-1/4.*s.*t+1/4.*r.*t-1/4.*r.*s.*t-1/8.*s.^2-1/8.*r.*s.^2-1/8.*r.^2+1/8.*r.^2.*s;
dN(3,3,:)=1/8-1/8.*r.*s+1/4.*t+1/4.*s.*t+1/4.*r.*t+1/4.*r.*s.*t-1/8.*r.^2-1/8.*r.^2.*s-1/8.*s.^2-1/8.*r.*s.^2;
dN(3,4,:)=1/8+1/8.*r.*s+1/4.*t+1/4.*s.*t-1/4.*r.*t-1/4.*r.*s.*t-1/8.*s.^2+1/8.*r.*s.^2-1/8.*r.^2-1/8.*r.^2.*s;
dN(3,5,:)=-1/8+1/8.*r.*s+1/4.*t-1/4.*s.*t-1/4.*r.*t+1/4.*r.*s.*t+1/8.*s.^2-1/8.*r.*s.^2+1/8.*r.^2-1/8.*r.^2.*s;
dN(3,6,:)=-1/8-1/8.*r.*s+1/4.*t-1/4.*s.*t+1/4.*r.*t-1/4.*r.*s.*t+1/8.*s.^2+1/8.*r.*s.^2+1/8.*r.^2-1/8.*r.^2.*s;
dN(3,7,:)=-1/8+1/8.*r.*s+1/4.*t+1/4.*s.*t+1/4.*r.*t+1/4.*r.*s.*t+1/8.*r.^2+1/8.*r.^2.*s+1/8.*s.^2+1/8.*r.*s.^2;
dN(3,8,:)=-1/8-1/8.*r.*s+1/4.*t+1/4.*s.*t-1/4.*r.*t-1/4.*r.*s.*t+1/8.*s.^2-1/8.*r.*s.^2+1/8.*r.^2+1/8.*r.^2.*s;
dN(3,9,:) =-1/4.*(-1+r.^2).*(-1+s);
dN(3,10,:)= 1/4.*( 1+r   ).*(-1+s.^2);
dN(3,11,:)= 1/4.*(-1+r.^2).*( 1+s);
dN(3,12,:)=-1/4.*(-1+r   ).*(-1+s.^2);
dN(3,13,:)= 1/4.*(-1+r.^2).*(-1+s);
dN(3,14,:)=-1/4.*( 1+r   ).*(-1+s.^2);
dN(3,15,:)=-1/4.*(-1+r.^2).*( 1+s);
dN(3,16,:)= 1/4.*(-1+r   ).*(-1+s.^2);
dN(3,17,:)= -1/2.*(-1+r).*(-1+s).*t;
dN(3,18,:)=  1/2.*( 1+r).*(-1+s).*t;
dN(3,19,:)= -1/2.*( 1+r).*( 1+s).*t;
dN(3,20,:)=  1/2.*(-1+r).*( 1+s).*t;
%=========================================================================%
end